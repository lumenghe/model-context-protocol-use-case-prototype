import asyncio
import json
import os

from google import genai
from google.genai import types
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client

# Initialize the Gemini client
client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))

# Define server parameters for the MCP connection (your `server.py`)
server_params = StdioServerParameters(
    command="python",  # Executable for running the server
    args=["server.py"],  # Arguments to start the server
    env=None,  # No environment variables
)


async def run():
    # Initialize the stdio client and MCP session
    async with stdio_client(server_params) as (read, write):
        async with ClientSession(read, write) as session:
            # Initialize the session
            await session.initialize()

            # Define a simple prompt for Gemini to trigger the tool
            prompt = "Use my special add tool to add 5 and 10."

            # List available tools from MCP server
            mcp_tools = await session.list_tools()
            print("Available tools:", mcp_tools)

            # Extract the tool from the MCP server
            tools = [
                types.Tool(
                    function_declarations=[
                        {
                            "name": tool.name,
                            "description": tool.description,
                            "parameters": {
                                k: v
                                for k, v in tool.inputSchema.items()
                                if k not in ["additionalProperties", "$schema"]
                            },
                        }
                    ]
                )
                for tool in mcp_tools.tools
            ]

            # Send the prompt to the Gemini model
            response = client.models.generate_content(
                model="gemini-2.5-pro-exp-03-25",  # Example model
                contents=prompt,
                config=types.GenerateContentConfig(
                    temperature=0,  # You can adjust this value
                    tools=tools,
                ),
            )

            # Handle the response from Gemini
            print("Gemini response:", response)

            if response.candidates[0].content.parts[0].function_call:
                # Extract function call details from Gemini's response
                function_call = response.candidates[0].content.parts[0].function_call
                result = await session.call_tool(function_call.name, arguments=dict(function_call.args))

                # Handle and print the result
                print("--- Formatted Result ---")
                try:
                    result_data = json.loads(result.content[0].text)
                    print(json.dumps(result_data, indent=2))
                except json.JSONDecodeError:
                    print("MCP server returned non-JSON response:")
                    print(result.content[0].text)
                except (IndexError, AttributeError):
                    print("Unexpected result structure from MCP server:")
                    print(result)
            else:
                print("No function call generated by the model.")
                if response.text:
                    print("Model response:")
                    print(response.text)


if __name__ == "__main__":
    asyncio.run(run())
